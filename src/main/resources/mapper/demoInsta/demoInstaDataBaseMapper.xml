<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.demoInsta.DemoInstaDataBase">
    <select id="emailChk" parameterType="String" resultType="int">
        SELECT COUNT(*) as cnt FROM demo_insta.member WHERE email  = #{email}
    </select>

    <insert id="memberIns" parameterType="com.example.demo.api.member.vo.MemberInsParamVO">
        INSERT INTO demo_insta.member(email, password, name, phone, ins_date)
        VALUES (#{email}, #{password}, #{name}, #{phone}, NOW())
    </insert>

    <select id="memberAuth" parameterType="map" resultType="com.example.demo.api.member.vo.AuthVO">
        SELECT
            EXISTS (
                SELECT * FROM demo_insta.member
                WHERE email = #{email} AND password = #{password}
            ) AS exists_flag,
            member_no
        FROM demo_insta.member
        WHERE email = #{email} AND password = #{password};
    </select>

    <select id="forgotPassword" parameterType="String" resultType="int">
        SELECT EXISTS(
            SELECT * FROM demo_insta.member
            WHERE email = #{email} and phone = #{phone}
        ) as t;
    </select>

    <update id="updPw" parameterType="String">
        UPDATE demo_insta.member
        SET password = #{password}
        WHERE email = #{email}
    </update>

    <select id="memberProfile" parameterType="String" resultType="com.example.demo.api.member.vo.MemberDataVO">
        SELECT * FROM demo_insta.member WHERE email = #{email}
    </select>

    <select id="memberPosts" parameterType="String" resultType="com.example.demo.api.member.vo.MemberPostsVO">
        SELECT * FROM demo_insta.posts WHERE user_mail = #{email} ORDER BY created_at DESC;
    </select>

    <select id="getNewFeedList" parameterType="map" resultType="com.example.demo.api.newFeed.vo.NewFeedVO">
        SELECT
            p.id,
            p.user_no AS post_user_no,
            p.content AS post_content,
            p.user_mail AS post_user_mail,
            p.created_at AS post_created_at,
            p.image_path,
            sub.comments,
            sub.comment_count,
            COUNT(l.post_id) AS like_count,
            MAX(IF(l.user_mail = #{userMail}, 1, 0)) AS is_liked,
            IF(m.profile_img IS NULL, '', m.profile_img) AS profile_img
        FROM
            demo_insta.posts AS p
                LEFT JOIN (
                SELECT
                    post_id,
                    CONCAT('[', GROUP_CONCAT(JSON_OBJECT('id', c.id, 'user_mail', c.user_mail, 'created_at', c.created_at, 'content', c.content, 'profile_img', IF(m.profile_img IS NULL, '', m.profile_img))), ']') AS comments,
                    COUNT(*) AS comment_count
                FROM
                    demo_insta.comments AS c
                        LEFT JOIN demo_insta.member AS m ON c.user_mail = m.email
                GROUP BY
                    post_id
            ) AS sub ON p.id = sub.post_id
                LEFT JOIN demo_insta.likes AS l ON p.id = l.post_id
                LEFT JOIN demo_insta.member AS m ON p.user_mail = m.email
        GROUP BY
            p.id,
            p.user_no,
            post_content,
            post_user_mail,
            post_created_at,
            image_path,
            comments,
            comment_count,
            profile_img
        ORDER BY
            post_created_at DESC;
    </select>

    <select id="getTargetFeedList" parameterType="map" resultType="com.example.demo.api.newFeed.vo.NewFeedVO">
        SELECT
            p.id,
            p.user_no,
            p.content AS post_content,
            p.user_mail AS post_user_mail,
            p.created_at AS post_created_at,
            p.image_path,
            sub.comments,
            sub.comment_count,
            COUNT(l.post_id) AS like_count,
            MAX(IF(l.user_mail = #{userMail}, 1, 0)) AS is_liked,
            IF(m.profile_img IS NULL, '', m.profile_img) AS profile_img
        FROM
            demo_insta.posts AS p
                LEFT JOIN (
                SELECT
                    post_id,
                    CONCAT('[', GROUP_CONCAT(JSON_OBJECT('id', c.id, 'user_mail', c.user_mail, 'created_at', c.created_at, 'content', c.content, 'profile_img', IF(m.profile_img IS NULL, '', m.profile_img))), ']') AS comments,
                    COUNT(*) AS comment_count
                FROM
                    demo_insta.comments AS c
                        LEFT JOIN demo_insta.member AS m ON c.user_mail = m.email
                GROUP BY
                    post_id
            ) AS sub ON p.id = sub.post_id
                LEFT JOIN demo_insta.likes AS l ON p.id = l.post_id
                LEFT JOIN demo_insta.member AS m ON p.user_mail = m.email
        WHERE p.user_mail = #{userMail}
        GROUP BY
            p.id,
            p.user_no,
            post_content,
            post_user_mail,
            post_created_at,
            image_path,
            comments,
            comment_count,
            profile_img
        ORDER BY
            post_created_at DESC;
    </select>

    <insert id="addComment" parameterType="map">
        INSERT INTO demo_insta.comments (post_id, content, created_at, user_mail)
        VALUES (#{postId}, #{content}, now(), #{userMail});
    </insert>

    <delete id="delComment" parameterType="map">
        DELETE FROM demo_insta.comments WHERE id = #{id} AND user_mail = #{userMail}
    </delete>

    <insert id="addPost" parameterType="map">
        INSERT INTO demo_insta.posts (content, created_at, image_path, user_mail, user_no)
        VALUES (#{content}, now(), #{imagePath}, #{userMail}, #{userNo})
    </insert>

    <delete id="delPost" parameterType="map">
        delete from demo_insta.posts where id = #{postNo} AND user_mail = #{userMail}
    </delete>

    <insert id="likeIns" parameterType="map">
        INSERT INTO demo_insta.likes(post_id, user_mail, created_at)
        VALUES (#{postNo}, #{userMail}, now())
    </insert>

    <delete id="likeDel" parameterType="map">
        DELETE FROM demo_insta.likes WHERE post_id = #{postNo} AND user_mail = #{userMail}
    </delete>

    <select id="likeList" parameterType="int" resultType="com.example.demo.api.newFeed.vo.LikeVO">
        SELECT l.*, m.profile_img, m.name
        FROM demo_insta.likes l
                 JOIN demo_insta.member m ON l.user_mail = m.email
        WHERE l.post_id = #{postNo}
    </select>

    <update id="memberProfilePhotoIns" parameterType="map">
        UPDATE demo_insta.member
        SET profile_img = #{imagePath}
        WHERE email = #{userMail};
    </update>

    <select id="followList" resultType="com.example.demo.api.newFeed.vo.FollowsVO">
        SELECT demo_insta.followers.*, demo_insta.member.profile_img
        FROM demo_insta.followers
        JOIN demo_insta.member ON demo_insta.followers.follower_email = demo_insta.member.email
        WHERE demo_insta.followers.user_email = #{email};
    </select>

    <select id="followerList" resultType="com.example.demo.api.newFeed.vo.FollowsVO">
        SELECT demo_insta.followers.*, demo_insta.member.profile_img
        FROM demo_insta.followers
        JOIN demo_insta.member ON demo_insta.followers.user_email = demo_insta.member.email
        WHERE demo_insta.followers.follower_email = #{email};
    </select>

    <select id="isFollowed" resultType="int">
        SELECT COUNT(*) FROM demo_insta.followers WHERE user_email = #{userEmail} and follower_email = #{followerEmail};
    </select>


    <select id="memberFollows" parameterType="String" resultType="com.example.demo.api.member.vo.MemberFollowsVO">
        SELECT * FROM demo_insta.followers WHERE user_email = #{email};
    </select>

    <select id="getFollowCnt" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM demo_insta.followers WHERE user_email = #{email};
    </select>

    <select id="getFollowerCnt" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM demo_insta.followers WHERE follower_email = #{email};
    </select>

    <select id="followCheck" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM demo_insta.followers
        WHERE user_email = #{userEmail} AND follower_email = #{followerEmail};
    </select>

    <insert id="addFollow" parameterType="map">
        INSERT INTO demo_insta.followers (follower_email, user_email, follow_time)
        VALUES (#{followerEmail}, #{userEmail}, NOW())
    </insert>

<!--    <delete id="delFollow">-->
<!--        DELETE FROM follows-->
<!--        WHERE follower_email = #{followerEmail}-->
<!--          AND following_email = #{followingEmail};-->
<!--    </delete>-->
    <!-- Alim -->
    <insert id="sendAlim">
        INSERT INTO demo_insta.alims (send_mem_no, receive_mem_no, alim_code, post_no)
        VALUES (#{sendMemNo}, #{receiveMemNo}, #{alimCode}, #{postNo})
    </insert>

    <select id="alimList" parameterType="map" resultType="com.example.demo.api.alim.vo.AlimVO">
        SELECT alims.*, member.name AS send_name, member.email AS send_email, member.profile_img AS send_profile_img
        FROM alims
        JOIN member ON alims.send_mem_no = member.member_no
        WHERE alims.receive_mem_no = #{myMemNo}
    </select>
</mapper>