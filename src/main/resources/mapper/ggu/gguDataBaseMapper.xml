<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.ggu.GguDataBase">
    <select id="emailChk" parameterType="String" resultType="int">
        SELECT COUNT(*) as cnt FROM ggubabo.member_table WHERE email  = #{email}
    </select>

    <insert id="memberIns" parameterType="com.example.demo.api.member.vo.MemberInsParamVO">
        INSERT INTO ggubabo.member_table(email, password, name, phone)
        VALUES (#{email}, #{password}, #{name}, #{phone})
    </insert>

    <select id="memberAuth" parameterType="map" resultType="int">
        SELECT EXISTS(
            SELECT * FROM ggubabo.member_table
            where email = #{email} and password = #{password}
        ) as t;
    </select>

    <select id="forgotPassword" parameterType="String" resultType="int">
        SELECT EXISTS(
            SELECT * FROM ggubabo.member_table
            WHERE email = #{email} and phone = #{phone}
        ) as t;
    </select>

    <update id="updPw" parameterType="String">
        UPDATE ggubabo.member_table
        SET password = #{password}
        WHERE email = #{email}
    </update>

    <select id="getNewFeedList" parameterType="map" resultType="com.example.demo.api.newFeed.vo.NewFeedVO">
        SELECT
            p.id,
            p.title,
            p.content AS post_content,
            p.user_mail AS post_user_mail,
            p.created_at AS post_created_at,
            p.image_path,
            sub.comments,
            sub.comment_count,
            COUNT(l.post_id) AS like_count,
            MAX(IF(l.user_mail = #{userMail}, 1, 0)) AS is_liked,
            IF(m.profile_img IS NULL, '', m.profile_img) AS profile_img
        FROM
            ggubabo.posts AS p
                LEFT JOIN (
                SELECT
                    post_id,
                    CONCAT('[', GROUP_CONCAT(JSON_OBJECT('id', c.id, 'user_mail', c.user_mail, 'created_at', c.created_at, 'content', c.content, 'profile_img', IF(m.profile_img IS NULL, '', m.profile_img))), ']') AS comments,
                    COUNT(*) AS comment_count
                FROM
                    ggubabo.comments AS c
                        LEFT JOIN ggubabo.member_table AS m ON c.user_mail = m.email
                GROUP BY
                    post_id
            ) AS sub ON p.id = sub.post_id
                LEFT JOIN ggubabo.likes AS l ON p.id = l.post_id
                LEFT JOIN ggubabo.member_table AS m ON p.user_mail = m.email
        GROUP BY
            p.id,
            p.title,
            post_content,
            post_user_mail,
            post_created_at,
            image_path,
            comments,
            comment_count,
            profile_img
        ORDER BY
            post_created_at DESC;
    </select>

    <insert id="addComment" parameterType="map">
        INSERT INTO ggubabo.comments (post_id, content, created_at, user_mail)
        VALUES (#{postId}, #{content}, now(), #{userMail});
    </insert>

    <delete id="delComment" parameterType="map">
        DELETE FROM ggubabo.comments WHERE id = #{id} AND user_mail = #{userMail}
    </delete>

    <insert id="addPost" parameterType="map">
        INSERT INTO ggubabo.posts (title, content, created_at, image_path, user_mail)
        VALUES (#{title}, #{content}, now(), #{imagePath}, #{userMail})
    </insert>

    <delete id="delPost" parameterType="map">
        delete from ggubabo.posts where id = #{postNo} AND user_mail = #{userMail}
    </delete>

    <insert id="likeIns" parameterType="map">
        INSERT INTO ggubabo.likes(post_id, user_mail, created_at)
        VALUES (#{postNo}, #{userMail}, now())
    </insert>

    <delete id="likeDel" parameterType="map">
        DELETE FROM ggubabo.likes WHERE post_id = #{postNo} AND user_mail = #{userMail}
    </delete>

    <select id="likeList" parameterType="int" resultType="com.example.demo.api.newFeed.vo.LikeVO">
        SELECT l.*, m.profile_img, m.name
        FROM ggubabo.likes l
                 JOIN ggubabo.member_table m ON l.user_mail = m.email
        WHERE l.post_id = #{postNo}
    </select>

    <update id="memberProfilePhotoIns" parameterType="map">
        UPDATE ggubabo.member_table
        SET profile_img = #{imagePath}
        WHERE email = #{userMail};
    </update>
</mapper>